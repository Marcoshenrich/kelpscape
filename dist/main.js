/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/denizens/algae.js":
/*!*******************************!*\
  !*** ./src/denizens/algae.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Algae; }\n/* harmony export */ });\n/* harmony import */ var _floater__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./floater */ \"./src/denizens/floater.js\");\n\n\n\nclass Algae extends _floater__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n    constructor(id, ctx, canvas, view, logic) {\n        super(ctx, canvas, view, logic)\n        this.id = \"Algae\" + id\n        this.img = new Image()\n        this.img.src = './dist/art/algae.png'\n        this.height = 8\n        this.width = 8\n        this.pos = this.placer()\n        this.bobCoef = Math.floor(Math.random() * 10) + 4\n        this.bobSpeed = (Math.floor(Math.random() * 3) +.1)/30\n        this.trackCoef = 0\n        this.up = [true, false][Math.floor(Math.random() * 2)]\n        this.energyVal = 10\n    }\n\n    placer() {\n        let pos = []\n        pos[0] = Math.floor(Math.random() * this.arenaWidth) - this.width\n        pos[1] = Math.floor(Math.random() * this.arenaHeight / 2) + (this.arenaHeight / 2) - this.height\n        return pos\n    }\n\n    \n\n}\n\n//# sourceURL=webpack://jsproj/./src/denizens/algae.js?");

/***/ }),

/***/ "./src/denizens/crab.js":
/*!******************************!*\
  !*** ./src/denizens/crab.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Crab; }\n/* harmony export */ });\n/* harmony import */ var _crabbaby__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crabbaby */ \"./src/denizens/crabbaby.js\");\n/* harmony import */ var _deadCreature__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deadCreature */ \"./src/denizens/deadCreature.js\");\n/* harmony import */ var _swimmer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./swimmer */ \"./src/denizens/swimmer.js\");\n\n\n\n\n\nclass Crab extends _swimmer__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n\n    constructor(id, ctx, canvas, view, logic, pos) {\n\n        super(ctx, canvas, view, logic)\n\n        this.id = \"Crab\" + id\n        this.spawn = false\n        this.img = new Image()\n        this.img.src = './dist/art/crab.png'\n        this.height = 15\n        this.width = 30\n        this.pos = pos || [Math.floor(Math.random() * this.arenaWidth - this.width), this.arenaHeight - this.height]\n        this.speed = Math.floor(Math.random() * 4)/10\n        this.maxSpeed = .4\n        this.up = false\n        this.right = [true, false][Math.floor(Math.random() * 2)]\n        this.recentlySwitchedDirections = false\n        this.dead = false\n\n        this.timeToClimbSeaweed = false\n        this.onSeaweed = false\n\n        this.seaweedSpots = this.seaweedFinder()\n        this.climbSeaweedTimer()\n\n        this.scavenging = false\n        this.consumptionRate = .005\n        this.recentlyAte = false\n\n        this.maxEnergy = 10\n        this.energy = this.maxEnergy\n        this.fadeThreshold = 5\n        \n\n        this.energyUseCoef = .0007\n        this.matingThreshold = 6\n        this.matingEnergyCost = 3\n        this.mating = false\n        this.carryingEggs = false\n        this.seekingMate = false\n\n        this.trapHeight = 6\n        this.trapWidth = this.width\n        this.trapPos = this.pos\n        this.trappedPrey = false\n\n        this.totalEnergyConsumed = 0\n    }\n\n\n    climbSeaweedTimer() {\n        setTimeout(() => {\n            this.timeToClimbSeaweed = !this.timeToClimbSeaweed\n            this.climbSeaweedTimer()\n        }, Math.floor(Math.random() * (this.timeToClimbSeaweed ? 60000 : 30000)))\n    }\n\n    seaweedFinder() {\n        let seaweedSpots = {}\n        Object.values(this.logic.seaweedClusters).forEach((seaweedCluster) => {\n            seaweedSpots[(seaweedCluster.pos[0] + Object.values(seaweedCluster.seaweed)[0].width / 2)] = seaweedCluster\n        })\n        return seaweedSpots\n    }\n\n    movementSwitchTimer() {\n        setTimeout(() => {\n            this.timeToSwitchMovement = true\n            this.movementSwitchTimer()\n        }, Math.floor(Math.random() * 2500) + 7000)\n    }\n\n    coreloop() {\n        if (this.trappedPrey) {\n            this.consumeFod(this.trappedPrey, \"trapped\")\n        } else if (this.scavenging) {\n            this.consumeFod(this.scavenging, \"scavenge\")\n        }\n\n        if (!this.scavenging) this.move()\n\n        this.consumeEnergy()\n        this.behaviorChanger()\n        this.draw()\n        // if (this.view.gameFrame % 10 !== 0) return\n        // if (this.dead && !(this.spawn && this.totalEnergyConsumed > this.growUpThreshold)) this.becomeCorpse()\n        \n\n    } \n\n    behaviorChanger(){\n        if (!this.spawn && !this.seekingMate && this.energy > this.matingThreshold && this.recentlyAte) {\n            this.logic.matingDenizensObj[this.id] = this\n            this.seekingMate = true\n        } else if (!this.spawn && this.seekingMate && this.energy < this.matingThreshold) {\n            delete this.logic.matingDenizensObj[this.id]\n            this.seekingMate = false\n        }\n    }\n\n    mate(spawnBool) {\n        this.mating = true\n        this.speed = 0\n        this.energy -= this.matingEnergyCost\n    \n        setTimeout(() => {\n            this.speed += .2\n            this.mating = false\n            if (spawnBool) return\n            this.img.src = './dist/art/crabdad.png'\n\n            setTimeout(() => {\n                this.img.src = './dist/art/crab.png'\n                let i = Math.floor(Math.random() * 3) + 2\n                while (i > 0) {\n                    i--\n                    this.logic.crabBabyCount += 1\n                    this.logic.crabBabies[\"CrabBaby\" + this.logic.crabBabyCount] = new _crabbaby__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.logic.crabBabyCount, this.ctx, this.canvas, this.view, this.logic, [Math.floor(this.pos[0]), Math.floor(this.pos[1])])\n                }\n            },30000)\n\n        }, 3000)\n    }\n\n    consumeFod(foodSource, foodType) {\n        this.energy = Math.min([this.maxEnergy, this.energy + this.consumptionRate])\n        if (foodType === \"scavenge\") {\n            foodSource.energyVal -= this.consumptionRate\n        } else {\n            foodSource.energy -= this.consumptionRate\n        }\n        \n        this.totalEnergyConsumed += this.consumptionRate\n        if (foodSource.dead) {\n            this.speed = .3\n            foodType === \"scavenge\" ? this.scavenging = false : this.trappedPrey = false\n        }\n\n        if (this.spawn && this.totalEnergyConsumed > this.growUpThreshold) {\n            this.growUp()\n        }\n\n        if (!this.recentlyAte && !this.scavenging) {\n            this.recentlyAte = true\n            setTimeout(() => { this.recentlyAte = false}, 10000) \n        }\n    }\n\n    becomeCorpse() {\n        this.logic.deadCreatureCount++\n        this.logic.deadCreatures[\"DeadCreature\" + this.logic.deadCreatureCount] = new _deadCreature__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.logic.deadCreatureCount, this.ctx, this.canvas, this.view, this.logic, this.pos, { type: \"Crab\" })\n    }\n\n    consumeEnergy() {\n\n        this.energy -= this.energyUseCoef * this.speed\n        if (this.energy < .01) {\n            this.dead = true\n            this.logic.recentlyDeadDenizens.push(this)\n        }\n\n    }\n\n\n    draw(){\n        this.ctx.globalAlpha = this.energy > this.fadeThreshold ? 1 : (this.energy + Math.abs(this.fadeThreshold - 10)) / 10\n        this.ctx.drawImage(this.img, this.pos[0] + this.offset[0], this.pos[1] + this.offset[1], this.width, this.height)\n        this.ctx.globalAlpha = 1\n\n        if (this.mating) this.ctx.drawImage(this.mateHeart, this.pos[0] + 8.5 + this.offset[0], this.pos[1] + this.offset[1] - 17, 15, 15)\n\n\n        if (this.view.debugging) {\n            this.ctx.fillStyle = 'rgba(255,255,255,1)';\n            this.ctx.font = \"12px serif\";\n            this.ctx.fillText(`${this.id}`, this.pos[0] + this.offset[0], this.pos[1] + this.offset[1])\n            this.ctx.fillText(`[${Math.floor(this.pos[0])},${Math.floor(this.pos[1])}]`, this.pos[0] + this.offset[0], this.pos[1] + this.offset[1] - this.height)\n            this.ctx.fillRect(this.trapPos[0] + this.offset[0], this.trapPos[1] + this.offset[1], this.trapWidth, this.trapHeight)\n        }\n        \n    }\n\n\n    travelLand() {\n\n        if (this.pos[0] > this.arenaWidth - this.width || this.pos[0] < 0) {\n            this.switchDirections()\n        }\n\n        if (this.pos[1] + this.height > this.arenaHeight) this.pos[1] = this.arenaHeight - this.height \n\n        if (this.right) {\n            this.pos[0] += this.speed\n        } else {\n            this.pos[0] -= this.speed\n        }\n    }\n\n\n    climbSeaweed(climbBool) {\n        if (climbBool) {\n            if (this.pos[1] < this.onSeaweed.tallestPoint + this.height || this.pos[1] > this.arenaHeight - this.height) {\n                this.switchDirections()\n            }\n\n            if (!this.right) {\n                this.pos[1] += this.speed\n            } else {\n                this.pos[1] -= this.speed\n            }\n            return\n        }\n\n        this.pos[1] += this.speed\n        if (this.pos[1] > this.arenaHeight - this.height) {\n            this.onSeaweed = false\n        }\n    }\n\n\n\n\n\n\n\n    move() {\n        if (!this.onSeaweed && this.timeToClimbSeaweed && (Math.floor(this.pos[0]) in this.seaweedSpots) ) {\n            this.onSeaweed = this.seaweedSpots[Math.floor(this.pos[0])]\n        }\n\n        if (this.onSeaweed && !this.timeToClimbSeaweed) {\n            this.climbSeaweed(false)\n            return\n        }\n\n        if (this.onSeaweed) {\n            this.climbSeaweed(true)\n        } else {\n            this.travelLand()\n        }\n\n        if (this.timeToSwitchMovement) {\n            Object.values(this.movementSwitches)[Math.floor(Math.random() * Object.values(this.movementSwitches).length)]()\n            this.timeToSwitchMovement = false\n        }\n        \n    }\n\n    movementSwitches = {\n\n        reverseSide: () => {\n            this.right = !this.right;\n        },\n\n        reverseSide2: () => {\n            this.right = !this.right;\n        },\n\n        speedUp: () => {\n            if (this.speed < this.maxSpeed) this.speed += .05\n        },\n\n        slowDown: () => {\n            if (this.speed > .1) this.speed -= .05\n        },\n\n        chill: () => {\n            this.speed = 0\n            setTimeout(()=>{\n                this.speed = .3\n            },Math.floor(Math.random() * 9000) +  1000)\n        }\n    }\n\n    switchDirections() {\n        if (this.recentlySwitchedDirections) return\n        this.right = !this.right;\n        this.recentlySwitchedDirections = true\n        setTimeout(() => { this.recentlySwitchedDirections = false }, 350)\n    }\n\n\n\n\n}\n\n\n\n//# sourceURL=webpack://jsproj/./src/denizens/crab.js?");

/***/ }),

/***/ "./src/denizens/crabbaby.js":
/*!**********************************!*\
  !*** ./src/denizens/crabbaby.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ CrabBaby; }\n/* harmony export */ });\n/* harmony import */ var _engine_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine/utils */ \"./src/engine/utils.js\");\n/* harmony import */ var _crab__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./crab */ \"./src/denizens/crab.js\");\n\n\n\n\nclass CrabBaby extends _crab__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n\n    constructor(id, ctx, canvas, view, logic, pos) {\n        super(id, ctx, canvas, view, logic)\n        this.id = \"CrabBaby\" + id\n        this.spawn = true\n        this.img = new Image()\n        this.img.src = './dist/art/crab.png'\n        this.height = 7.5\n        this.width = 15\n        this.pos = [pos[0] + (0,_engine_utils__WEBPACK_IMPORTED_MODULE_0__.miniRandomizer)(), this.arenaHeight - this.height]\n        this.speed = Math.floor(Math.random() * 4) / 20\n        this.maxSpeed = .25\n\n        this.consumptionRate = .002\n        this.growUpThreshold = 1\n\n        this.maxEnergy = 5\n        this.energy = this.maxEnergy\n        this.energyUseCoef = .0007\n        this.fadeThreshold = 2.5\n\n        this.trapHeight = 3\n        this.trapWidth = this.width\n \n    }\n\n    growUp() {\n        this.dead = true\n        this.logic.recentlyDeadDenizens.push(this)\n        this.logic.crabCount += 1\n        this.logic.crabs[\"Crab\" + this.logic.fishCount] = new _crab__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.logic.crabCount, this.ctx, this.canvas, this.view, this.logic, [this.pos[0], this.pos[1]])\n    }\n\n\n\n}\n\n\n\n//# sourceURL=webpack://jsproj/./src/denizens/crabbaby.js?");

/***/ }),

/***/ "./src/denizens/deadCreature.js":
/*!**************************************!*\
  !*** ./src/denizens/deadCreature.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ DeadCreature; }\n/* harmony export */ });\n/* harmony import */ var _denizen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./denizen */ \"./src/denizens/denizen.js\");\n\n\nclass DeadCreature extends _denizen__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id, ctx, canvas, view, logic, pos, options) {\n        super(ctx, canvas, view, logic)\n        this.id = \"DeadCreature\" + id\n        this.pos = [pos[0], pos[1]]\n        this.driftSpeed = .2\n        this.img = new Image()\n        this.type = options && options.type || \"Fish\"\n        this.width;\n        this.height;\n        this.energyVal;\n        this.typeSelector()\n        this.dead = false\n    }\n\n    coreloop() {\n        if (this.pos[1] < this.arenaHeight - this.height) this.pos[1] += this.driftSpeed\n        this.draw()\n        if (this.energyVal < 0) {\n            this.dead = true\n            this.logic.recentlyDeadDenizens.push(this)\n\n        }\n    }\n\n    draw() {\n        this.ctx.globalAlpha = this.energyVal > 5 ? 1 : (this.energyVal + 5) / 10\n        this.ctx.drawImage(this.img, this.pos[0] + this.offset[0], this.pos[1] + this.offset[1], this.width, this.height)\n        this.ctx.globalAlpha = 1\n\n        if (this.view.debugging) {\n            this.ctx.fillStyle = 'rgba(255,255,255,1)';\n            this.ctx.font = \"12px serif\";\n            this.ctx.fillText(`${this.energyVal}`, this.pos[0] + this.offset[0], this.pos[1] + this.offset[1])\n            this.ctx.fillText(`[${Math.floor(this.pos[0])},${Math.floor(this.pos[1])}]`, this.pos[0] + this.offset[0], this.pos[1] + this.offset[1] - this.height)\n\n        }\n    }\n\n\n    typeSelector() {\n\n        switch(this.type) {\n            case \"Spawn\":\n                this.img.src = './dist/art/fishdead.png'\n                this.width = 12\n                this.height = 8\n                this.energyVal = 5\n                break\n\n            case \"Fish\":\n                this.img.src = './dist/art/fishdead.png'\n                this.width = 25\n                this.height = 15\n                this.energyVal = 10\n                break\n\n            case \"Crab\":\n                this.img.src = './dist/art/crabdead.png'\n                this.width = 30\n                this.height = 15\n                this.energyVal = 5\n                break\n\n            default: \n                this.img.src = './dist/art/fishdead.png'\n        }\n\n    }\n\n\n}\n\n//# sourceURL=webpack://jsproj/./src/denizens/deadCreature.js?");

/***/ }),

/***/ "./src/denizens/denizen.js":
/*!*********************************!*\
  !*** ./src/denizens/denizen.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Denizen; }\n/* harmony export */ });\nclass Denizen {\n\n    constructor(ctx, canvas, view, logic) {\n        this.ctx = ctx\n        this.canvas = canvas\n        this.view = view\n        this.logic = logic\n        this.dead = false\n        this.arenaHeight = this.view.arenaHeight\n        this.arenaWidth = this.view.arenaWidth\n        this.offset = this.view.offset\n\n        this.mateHeart = new Image()\n        this.mateHeart.src = './dist/art/red-heart.png'\n\n        this.clearOnDeath = []\n        this.trapped = false\n        this.trappedPosDelta = []\n    }\n    \n\n    collisionDetector(pos1, pos2) {\n        let [[pos1x, pos1y], [dim1x, dim1y]] = pos1\n        let [[pos2x, pos2y], [dim2x, dim2y]] = pos2\n\n        if (\n            pos1x < pos2x + dim2x &&\n            pos1x + dim1x > pos2x &&\n            pos1y < pos2y + dim2y &&\n            dim1y + pos1y > pos2y\n        ) {\n            return true\n        }\n        return false\n    }\n\n    clearCallbacksOnDeath() {\n        this.clearOnDeath.forEach((timerId)=>{\n            clearTimeout(timerId)\n        })\n    }\n\n}\n\n\n//# sourceURL=webpack://jsproj/./src/denizens/denizen.js?");

/***/ }),

/***/ "./src/denizens/effect.js":
/*!********************************!*\
  !*** ./src/denizens/effect.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Effect; }\n/* harmony export */ });\n\n\nclass Effect {\n    constructor(id, type, pos, ctx, canvas, view) {\n        this.id = \"Effect\" + id\n        this.type = type\n        this.pos = pos\n        this.ctx = ctx\n        this.canvas = canvas\n        this.view = view\n        this.size = 10\n        this.coef1 = 0\n        this.coef2 = 0\n        this.dead = false\n    }\n\n    coreloop() {\n        switch(this.type) {\n            case \"bloodSpurt\":\n                this.bloodSpurt()\n                break\n\n            default:\n                return\n        }\n\n    }\n\n    bloodSpurt() {\n        this.ctx.fillStyle = 'rgba(255,0,0,1)';\n        this.ctx.fillRect(this.pos[0] + this.coef1 + this.view.offset[0], this.pos[1] + this.coef2 + this.view.offset[1], this.size, this.size)\n        this.ctx.fillRect(this.pos[0] + this.coef1 + this.view.offset[0], this.pos[1] - this.coef2 + this.view.offset[1], this.size, this.size)\n        this.ctx.fillRect(this.pos[0] - this.coef1 + this.view.offset[0], this.pos[1] + this.coef2 + this.view.offset[1], this.size, this.size)\n        this.ctx.fillRect(this.pos[0] - this.coef1 + this.view.offset[0], this.pos[1] - this.coef2 + this.view.offset[1], this.size, this.size)\n        this.coef1 += .7\n        this.coef2 += .7\n        this.size -= .3\n        if (this.size < 0) {\n            this.dead = true\n            this.view.logic.recentlyDeadDenizens.push(this)\n        }\n    }\n\n    clearCallbacksOnDeath(){\n        //prevents breaking on logic deathloop\n    }\n\n}\n\n//# sourceURL=webpack://jsproj/./src/denizens/effect.js?");

/***/ }),

/***/ "./src/denizens/fish.js":
/*!******************************!*\
  !*** ./src/denizens/fish.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Fish; }\n/* harmony export */ });\n/* harmony import */ var _fishegg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fishegg */ \"./src/denizens/fishegg.js\");\n/* harmony import */ var _swimmer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./swimmer */ \"./src/denizens/swimmer.js\");\n\n\n\n\nclass Fish extends _swimmer__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n\n    constructor(id, ctx, canvas, view, logic, pos) {\n        super(ctx, canvas, view, logic)\n        this.spawn = false\n        this.id = \"Fish\" + id\n        this.leftImg.src = './dist/art/fishleft.png'\n        this.rightImg.src = './dist/art/fishright.png'\n        this.speed = (Math.floor(Math.random() * 5) + 1) / 10\n        this.width = 25\n        this.height = 16\n        this.pos = pos || this.placer()\n        this.oldPos = this.pos\n        this.mouthSize = 8\n        this.mouthPos = this.mouthPlacer()\n        this.movement1 = this.moveSelector()\n        this.movement2 = this.moveSelector()\n        this.moveChangerOne()\n        this.moveChangerTwo()\n\n        this.maxEnergy = 20\n        this.energy = this.maxEnergy\n\n        this.fadeThreshold = 7\n\n        this.energyUseCoef = .005\n        this.matingThreshold = 15\n        this.matingEnergyCost = 5\n        this.maxSpeed = .6\n\n        this.energyVal = 20\n\n        this.mating = false\n        this.mateThreshold = 10\n\n        this.seekingMate = false\n\n        this.foodEaten = 0\n        this.eatFoodThreshold = 15\n        this.huntingThreshold = 7\n\n        this.hunting = false\n        this.nearestFoodCords = []\n\n\n        this.fleeDistanceThreshold = 200\n        this.fleeing = false\n        this.fleeFromCoords = []\n\n        this.afterIEatCB = () => {\n            //nothing required, spawn grow up separately\n        }\n        \n    }\n\n    mouthPlacer() {\n        let mouthPos = []\n        if (!this.right) {\n            mouthPos = [this.pos[0], this.pos[1] + (this.height / 2)]\n        } else {\n            mouthPos = [this.pos[0] + (this.width - this.mouthSize), this.pos[1] + (this.height / 2)]\n        }\n        return mouthPos\n    }\n\n    imgSelector() {\n       return this.right ? this.rightImg : this.leftImg \n    }\n    \n    placer() {\n        let pos = []\n        pos[0] = Math.floor(Math.random() * (this.arenaWidth- this.width))\n        pos[1] = Math.floor(Math.random() * (this.arenaHeight - this.height)) \n        return pos\n    }\n\n\n    draw() {\n        this.ctx.fillStyle = 'rgba(0,225,225,1)';\n        this.ctx.globalAlpha = this.energy > 7 ? 1 : (this.energy + 3) / 10\n        this.ctx.drawImage(this.img, this.pos[0] + this.offset[0], this.pos[1] + this.offset[1], this.width, this.height)\n        if (this.mating) this.ctx.drawImage(this.mateHeart, this.mouthPos[0] + this.offset[0], this.mouthPos[1] + this.offset[1] - this.width, 15, 15)\n        if (this.view.debugging) {\n            this.drawMouths()\n            this.drawId()\n        }\n        this.ctx.globalAlpha = 1\n    }\n\n    drawMouths() {\n        //debugging function\n        this.ctx.fillRect(this.mouthPos[0] + this.offset[0], this.mouthPos[1] + this.offset[1], this.mouthSize, this.mouthSize)\n    }\n\n    drawId() {\n        //debugging function\n        this.ctx.fillStyle = 'rgba(0,0,0,1)';\n        this.ctx.font = \"12px serif\";\n        this.ctx.fillText(`${this.id}`, this.pos[0] + this.offset[0], this.pos[1] +  this.offset[1])\n    }\n\n    mate(spawnBool) {\n        this.mating = true\n        this.speed = 0\n        this.energy -= this.matingEnergyCost\n        setTimeout(()=>{\n            this.speed += .5\n            this.mating = false\n            if (spawnBool) return\n            let i = Math.floor(Math.random() * 6)\n            while (i > 0) {\n                i--\n                this.logic.eggCount += 1\n                this.logic.eggs[\"Fishegg\" + this.logic.eggCount] = new _fishegg__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.logic.eggCount, this.ctx, this.canvas, this.view, this.logic, [Math.floor(this.pos[0]), Math.floor(this.pos[1])])\n            }\n        }, 1500)\n    }\n}\n\n//# sourceURL=webpack://jsproj/./src/denizens/fish.js?");

/***/ }),

/***/ "./src/denizens/fishbaby.js":
/*!**********************************!*\
  !*** ./src/denizens/fishbaby.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ FishBaby; }\n/* harmony export */ });\n/* harmony import */ var _fish__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fish */ \"./src/denizens/fish.js\");\n/* harmony import */ var _engine_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../engine/utils */ \"./src/engine/utils.js\");\n\n\n\n\nclass FishBaby extends _fish__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n    constructor(id, ctx, canvas, view, logic, pos) {\n        super(id, ctx, canvas, view, logic, pos)\n        this.spawn = true\n        this.id = \"FishBaby\" + id\n        this.leftImg.src = './dist/art/fishleft.png'\n        this.rightImg.src = './dist/art/fishright.png'\n        this.speed = (Math.floor(Math.random() * 5) + 1) / 10\n        this.width = 12\n        this.height = 8\n        this.pos = [pos[0] + (0,_engine_utils__WEBPACK_IMPORTED_MODULE_1__.miniRandomizer)(), pos[1] + (0,_engine_utils__WEBPACK_IMPORTED_MODULE_1__.miniRandomizer)()]\n        this.oldPos = this.pos\n        this.mouthSize = 4\n\n        this.maxEnergy = 10\n        this.energy = this.maxEnergy\n        this.energyUseCoef = .0025\n        this.maxSpeed = .3\n\n        this.energyVal = 5\n        this.fadeThreshold = 3\n\n        this.foodEaten = 0\n        this.growUpThreshold = 4\n        this.eatFoodThreshold = 8\n        this.huntingThreshold = 6\n\n        this.hunting = false\n        this.nearestFoodCords = []\n\n        this.fleeDistanceThreshold = 200\n        this.fleeing = false\n        this.fleeFromCoords = []\n\n        this.afterIEatCB = () => {\n            if (this.foodEaten === this.growUpThreshold) this.growUp()\n        }\n    }\n\n    growUp() {\n        this.dead = true\n        this.logic.recentlyDeadDenizens.push(this)\n        this.logic.fishCount += 1\n        this.logic.fishes[\"Fish\" + this.logic.fishCount] = new _fish__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.logic.fishCount, this.ctx, this.canvas, this.view, this.logic, [this.pos[0], this.pos[1]])\n    }\n\n}\n\n    \n\n//# sourceURL=webpack://jsproj/./src/denizens/fishbaby.js?");

/***/ }),

/***/ "./src/denizens/fishegg.js":
/*!*********************************!*\
  !*** ./src/denizens/fishegg.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Fishegg; }\n/* harmony export */ });\n/* harmony import */ var _floater__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./floater */ \"./src/denizens/floater.js\");\n/* harmony import */ var _engine_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../engine/utils */ \"./src/engine/utils.js\");\n/* harmony import */ var _fishbaby__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fishbaby */ \"./src/denizens/fishbaby.js\");\n\n\n\n\n\nclass Fishegg extends _floater__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n    constructor(id, ctx, canvas, view, logic, pos) {\n        super(ctx, canvas, view, logic)\n        this.id = \"Fishegg\" + id\n        this.pos = [pos[0] + (0,_engine_utils__WEBPACK_IMPORTED_MODULE_1__.miniRandomizer)(), pos[1] + (0,_engine_utils__WEBPACK_IMPORTED_MODULE_1__.miniRandomizer)()]\n\n        this.img = new Image()\n        this.img.src = './dist/art/fishEggs.png'\n        this.spawn()\n        this.dims = Math.floor(Math.random() * 5) + 10\n        this.height = this.dims\n        this.width = this.dims\n    }\n\n\n    spawn() {\n        let timerId = setTimeout(()=>{\n            this.dead = true\n            this.logic.recentlyDeadDenizens.push(this)\n            this.logic.fishBabyCount += 1\n            this.logic.fishBabies[\"FishBaby\" + this.logic.fishBabyCount] = new _fishbaby__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.logic.fishBabyCount, this.ctx, this.canvas, this.view, this.logic, [this.pos[0], this.pos[1]])\n        },(0,_engine_utils__WEBPACK_IMPORTED_MODULE_1__.rand)(15000,25000))\n\n        this.clearOnDeath.push(timerId)\n    }\n}\n\n//# sourceURL=webpack://jsproj/./src/denizens/fishegg.js?");

/***/ }),

/***/ "./src/denizens/floater.js":
/*!*********************************!*\
  !*** ./src/denizens/floater.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Floater; }\n/* harmony export */ });\n/* harmony import */ var _denizen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./denizen */ \"./src/denizens/denizen.js\");\n\n\n\nclass Floater extends _denizen__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n    constructor(ctx, canvas, view, logic) {\n        super(ctx, canvas, view, logic)\n        this.bobCoef = Math.floor(Math.random() * 10) + 4\n        this.bobSpeed = (Math.floor(Math.random() * 3) + .1) / 30\n        this.trackCoef = 0\n        this.up = [true, false][Math.floor(Math.random() * 2)]\n        this.energy = 5\n    }\n\n    coreloop() {\n        this.bob()\n        this.dieFromEnergyLoss()\n        this.ctx.drawImage(this.img, this.pos[0] + this.offset[0], this.pos[1] + this.offset[1], this.width, this.height)\n        if (this.view.debugging) {\n            this.ctx.fillStyle = 'rgba(0,0,0,1)';\n            this.ctx.font = \"12px serif\";\n            this.ctx.fillText(`${this.pos[1]}`, this.pos[0], this.pos[1])\n        }\n    }\n\n    dieFromEnergyLoss() {\n        if (this.energy < 0) {\n            this.dead = true\n            this.logic.recentlyDeadDenizens.push(this)\n        }\n    }\n\n    bob() {\n\n        if (this.trapped) {\n            this.pos[0] = this.trapped.pos[0] - this.trappedPosDelta[0]\n            this.pos[1] = this.trapped.pos[1] - this.trappedPosDelta[1]\n            return\n        }\n\n\n\n        if (this.up) {\n            this.trackCoef -= this.bobSpeed\n            this.pos[1] -= this.bobSpeed\n        } else {\n            this.trackCoef += this.bobSpeed\n            \n            if (!(this.pos[1] > (this.arenaHeight - this.height))) {\n                this.pos[1] += this.bobSpeed\n            }\n        }\n\n        if (this.trackCoef > this.bobCoef) {\n            this.up = true\n        }\n\n        if (this.trackCoef < 0) {\n            this.up = false\n        }\n\n    }\n\n\n}\n\n//# sourceURL=webpack://jsproj/./src/denizens/floater.js?");

/***/ }),

/***/ "./src/denizens/shark.js":
/*!*******************************!*\
  !*** ./src/denizens/shark.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Shark; }\n/* harmony export */ });\n/* harmony import */ var _effect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./effect */ \"./src/denizens/effect.js\");\n/* harmony import */ var _swimmer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./swimmer */ \"./src/denizens/swimmer.js\");\n\n\n\n\nclass Shark extends _swimmer__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n\n    constructor(id, ctx, canvas, view, logic, spawn) {\n        super(ctx, canvas, view, logic)\n        this.id = \"Shark\" + id\n\n        this.leftImg.src = './dist/art/sharkleft.png'\n        this.rightImg.src = './dist/art/sharkright.png'\n        this.mateHeart = new Image()\n        this.mateHeart.src = './dist/art/red-heart.png'\n        this.speed = (Math.floor(Math.random() * 5) + 5) / 10\n        this.width = spawn ? 20 : 100\n        this.height = spawn ? 8 : 41\n        this.pos = this.placer()\n        this.oldPos = this.pos\n        this.mouthSize = spawn ? 4 : 12\n        this.mouthPos = this.mouthPlacer()\n        this.movement1 = this.moveSelector()\n        this.movement2 = this.moveSelector()\n        this.moveChangerOne()\n        this.moveChangerTwo()\n\n        this.seekingMate = false\n        this.mateThreshold = 70\n        \n        this.maxEnergy = 100\n        this.energy = this.maxEnergy\n        this.fadeThreshold = 7\n        this.energyUseCoef = .005\n        this.matingThreshold = 15\n        this.matingEnergyCost = 5\n        this.maxSpeed = spawn ? .3 : 1\n\n        this.mating = false\n        this.spawn = spawn ? true : false\n        this.foodEaten = 0\n        this.huntingThreshold = 60\n        this.eatFoodThreshold = 70\n\n        this.hunting = false\n        this.nearestFoodCords = []\n\n        this.afterIEatCB = () => {\n            this.logic.effectCount++\n            this.logic.effects[\"Effect\" + this.logic.effectCount] = new _effect__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.logic.effectCount, \"bloodSpurt\", [this.mouthPos[0], this.mouthPos[1]], this.logic.ctx, this.logic.canvas, this.logic.view)\n        }\n\n    }\n\n    growUp() {\n        this.spawn = false\n        this.maxSpeed = .6\n        this.mouthSize = 8\n        this.width = 25\n        this.height = 16\n    }\n\n    mouthPlacer() {\n        let mouthPos = []\n        if (!this.right) {\n            mouthPos = [this.pos[0] + 5, this.pos[1] + (this.height / 2)]\n        } else {\n            mouthPos = [this.pos[0] + (this.width - this.mouthSize) - 5, this.pos[1] + (this.height / 2)]\n        }\n        return mouthPos\n    }\n\n    imgSelector() {\n        return this.right ? this.rightImg : this.leftImg\n    }\n\n    placer() {\n        let pos = []\n        pos[0] = Math.floor(Math.random() * (this.arenaWidth - this.width))\n        pos[1] = Math.floor(Math.random() * (this.arenaHeight - this.height))\n        return pos\n    }\n\n\n    draw() {\n        this.ctx.fillStyle = 'rgba(0,225,225,1)';\n        this.ctx.globalAlpha = this.energy > this.fadeThreshold ? 1 : (this.energy + Math.abs(this.fadeThreshold - 10)) / 10\n        this.ctx.drawImage(this.img, this.pos[0] + this.offset[0], this.pos[1] + this.offset[1], this.width, this.height)\n\n        if (this.view.debugging) {\n            this.drawMouths()\n            this.drawId()\n        }\n        this.ctx.globalAlpha = 1\n    }\n\n    drawMouths() {\n        //debugging function\n        this.ctx.fillRect(this.mouthPos[0] + this.offset[0], this.mouthPos[1] + this.offset[1], this.mouthSize, this.mouthSize)\n    }\n\n    drawId() {\n        //debugging function\n        this.ctx.fillStyle = 'rgba(0,0,0,1)';\n        this.ctx.font = \"12px serif\";\n        this.ctx.fillText(`${this.energy}`, this.pos[0] + this.offset[0], this.pos[1] + this.offset[1])\n    }\n\n    mate(){\n        \n    }\n\n}\n\n//# sourceURL=webpack://jsproj/./src/denizens/shark.js?");

/***/ }),

/***/ "./src/denizens/swimmer.js":
/*!*********************************!*\
  !*** ./src/denizens/swimmer.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Swimmer; }\n/* harmony export */ });\n/* harmony import */ var _denizen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./denizen */ \"./src/denizens/denizen.js\");\n/* harmony import */ var _deadCreature__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deadCreature */ \"./src/denizens/deadCreature.js\");\n\n\n\nclass Swimmer extends _denizen__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n    constructor(ctx, canvas, view, logic) {\n        super(ctx, canvas, view, logic)\n        this.up = [true, false][Math.floor(Math.random() * 2)]\n        this.right = [true, false][Math.floor(Math.random() * 2)]\n        this.leftImg = new Image()\n        this.rightImg = new Image()\n        this.img = this.imgSelector()\n        this.recentlySwitchedDirections = false\n        this.movementSwitchTimer()\n        this.timeToSwitchMovement = false\n    }\n\n    coreloop() {\n        this.move()\n        this.consumeEnergy()\n        this.draw()\n        // if (this.view.gameFrame % 10 !== 0) return\n        if (this.dead && !(this.spawn && this.foodEaten === this.growUpThreshold)) this.becomeCorpse()\n        this.behaviorChanger()\n    }\n\n\n    behaviorChanger() {\n        if (!this.hunting && this.energy < this.huntingThreshold) this.logic.hungryDenizenArr.push(this)\n       \n        if (!this.spawn && !this.seekingMate && this.energy > this.matingThreshold) {\n            this.logic.matingDenizensObj[this.id] = this\n            this.seekingMate = true\n        } else if (!this.spawn && this.seekingMate && this.energy < this.matingThreshold) {\n            delete this.logic.matingDenizensObj[this.id]\n            this.seekingMate = false\n        }\n\n    }\n\n    movementSwitchTimer() {\n        setTimeout(()=>{\n            this.timeToSwitchMovement = true\n            this.movementSwitchTimer()\n        },Math.floor(Math.random() * 25000) + 7000)\n    }\n\n    imgSelector() {\n        return this.right ? this.rightImg : this.leftImg\n    }\n\n    //maybe refactor so that moving left and right is an intrinsic state, and the switch happens accordingly to movement \n    // one issue is that the mouthpos changes, which is partially causing the bug\n\n    switchDirections() {\n        if (this.recentlySwitchedDirections) return\n        this.right = !this.right;\n        this.img = this.imgSelector();\n        this.recentlySwitchedDirections = true\n        setTimeout(() => { this.recentlySwitchedDirections = false },350)\n    }\n\n    move() {\n\n        if (this.trapped) {\n            this.pos[0] = this.trapped.pos[0] - this.trappedPosDelta[0]\n            this.pos[1] = this.trapped.pos[1] - this.trappedPosDelta[1]\n            return\n        }\n\n        if (this.pos[0] > this.arenaWidth - this.width || this.pos[0] < 0) {\n            this.switchDirections()\n        }\n        if (this.pos[1] > this.arenaHeight - this.height || this.pos[1] < 0) this.up = !this.up\n        this.mouthPos = this.mouthPlacer();\n\n        if (this.speed < .01) this.speed = .3\n\n        this.oldPos = [this.pos[0], this.pos[1]]\n\n        if (!this.mating && this.hunting) {\n            this.moveTowardsFood()\n            this.fishOrienter()\n            return\n        }\n\n        if (this.fleeing) {\n            this.fleeFromPredator()\n            this.fishOrienter()\n            return\n        }\n\n        if (!this.mating && !this.hunting) {\n            if (this.timeToSwitchMovement){\n                Object.values(this.movementSwitches)[Math.floor(Math.random() * Object.values(this.movementSwitches).length)]()\n                this.timeToSwitchMovement = false\n            }    \n\n            this.movement1();\n            this.movement2();\n            this.fishOrienter()\n        }\n\n\n    }\n\n    fleeFromPredator() {\n        let [xhigh, xlow, yhigh, ylow] = this.inBounds()\n\n\n        if (this.pos[0] > this.fleeFromCoords[0]) {\n            if (xhigh) {\n                this.pos[0] += this.maxSpeed\n            }else {\n                this.pos[0] = this.arenaWidth - this.width\n            }\n        } else {\n            if (xlow) {\n                this.pos[0] -= this.maxSpeed\n            } else {\n                this.pos[0] = 0\n            }\n        }\n\n        if (this.pos[1] > this.fleeFromCoords[1]) {\n            if (yhigh) {\n                this.pos[1] += this.maxSpeed\n            } else {\n                this.pos[1] = this.arenaHeight - this.height\n            }\n        } else {\n            if (ylow) {\n                this.pos[1] -= this.maxSpeed\n            } else {\n                this.pos[1] = 0\n            }\n        }\n\n    }\n\n    inBounds(){\n        let xhigh = true\n        let xlow = true\n        let yhigh = true\n        let ylow = true\n        if (this.pos[0] < 0) xlow = false\n        if (this.pos[0] > this.arenaWidth - this.width) xhigh = false\n        if (this.pos[1] < 0) ylow = false\n        if (this.pos[1] > this.arenaHeight - this.height) yhigh = false\n        return [xhigh, xlow, yhigh, ylow]\n    }\n\n    movementPatterns = {\n        scan: () => {\n            if (this.right) {\n                this.pos[0] += (this.speed / 2)\n            } else {\n                this.pos[0] -= (this.speed / 2)\n            }\n        },\n\n        crissCross: () => {\n            this.movementPatterns.scan()\n            this.movementPatterns.bob()\n        },\n\n        bob: () => {\n            if (this.up) {\n                this.pos[1] += (this.speed / 2)\n            } else {\n                this.pos[1] -= (this.speed / 2)\n            }\n        }\n    }\n\n    movementSwitches = {\n        reverseUp: () => {\n            this.up = !this.up\n        },\n\n        reverseSide: () => {\n            this.right = !this.right;\n            this.img = this.imgSelector();\n        },\n\n        speedUp: () => {\n            if (this.speed < this.maxSpeed) this.speed += .1\n        },\n\n        slowDown: () => {\n            if (this.speed > .3) this.speed -= .1\n        },\n\n        dash: () => {\n            this.speed += .5\n            setTimeout(() => this.speed -= .5, 500)\n        }\n    }\n\n    fishOrienter() {\n        if (this.recentlySwitchedDirections) return\n        if (this.oldPos[0] < this.pos[0]) {\n            this.right = true\n            this.img = this.imgSelector();\n            this.recentlySwitchedDirections = true\n            setTimeout(() => { this.recentlySwitchedDirections = false }, 350)\n        } else {\n            this.right = false\n            this.img = this.imgSelector();\n            this.recentlySwitchedDirections = true\n            setTimeout(() => { this.recentlySwitchedDirections = false }, 350)\n        }\n    }\n\n    moveTowardsFood() {\n\n        let [xhigh, xlow, yhigh, ylow] = this.inBounds()\n\n        if (this.mouthPos[0] < this.nearestFoodCords[0]) {\n            if (xhigh) this.pos[0] += this.maxSpeed \n        } else {\n            if (xlow) this.pos[0] -= this.maxSpeed\n        }\n\n\n\n        if (this.mouthPos[1] < this.nearestFoodCords[1]) {\n            if (yhigh) this.pos[1] += this.maxSpeed\n        } else {\n            if (ylow) this.pos[1] -= this.maxSpeed\n        }\n    \n    }\n\n    moveSelector = () => {\n        return Object.values(this.movementPatterns)[Math.floor(Math.random() * 2)]\n    }\n\n    moveChangerOne() {\n        this.movement1 = this.moveSelector()\n        setTimeout(() => {\n            this.moveChangerOne()\n        }, Math.floor(Math.random() * 3000))\n    }\n\n    moveChangerTwo() {\n        this.movement2 = this.moveSelector()\n        setTimeout(() => {\n            this.moveChangerTwo()\n        }, Math.floor(Math.random() * 3000))\n    }\n\n    consumeEnergy() {\n        this.energy -= this.energyUseCoef * this.speed\n        if (this.energy < .05) {\n            this.dead = true\n            this.logic.recentlyDeadDenizens.push(this)\n        }\n    }\n\n    becomeCorpse() {\n        this.logic.deadCreatureCount++\n        this.logic.deadCreatures[\"DeadCreature\" + this.logic.deadCreatureCount] = new _deadCreature__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.logic.deadCreatureCount, this.ctx, this.canvas, this.view, this.logic, this.pos, { type: (this.spawn ? \"Spawn\": \"Fish\")})\n    }\n\n\n\n}\n\n//# sourceURL=webpack://jsproj/./src/denizens/swimmer.js?");

/***/ }),

/***/ "./src/engine/input.js":
/*!*****************************!*\
  !*** ./src/engine/input.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ InputHandler; }\n/* harmony export */ });\n\r\nclass InputHandler {\r\n\r\n    constructor(){\r\n        this.keys = [];\r\n        window.addEventListener('keydown', e => {\r\n            if((e.code === 'ArrowDown' ||\r\n                e.code === 'ArrowUp' ||\r\n                e.code === 'ArrowLeft' ||\r\n                e.code === 'ArrowRight' ||\r\n                e.code === \"Space\")\r\n            && this.keys.indexOf(e.code) === -1){\r\n                this.keys.push(e.code);\r\n            }\r\n            e.preventDefault();\r\n        });\r\n\r\n        window.addEventListener('keyup', e => {\r\n            if (e.code === 'ArrowDown' ||\r\n                e.code === 'ArrowUp' ||\r\n                e.code === 'ArrowLeft' ||\r\n                e.code === 'ArrowRight' ||\r\n                e.code === \"Space\") {\r\n                this.keys.splice(this.keys.indexOf(e.code), 1);\r\n            }\r\n            e.preventDefault();\r\n        })\r\n    }\r\n}\n\n//# sourceURL=webpack://jsproj/./src/engine/input.js?");

/***/ }),

/***/ "./src/engine/logic.js":
/*!*****************************!*\
  !*** ./src/engine/logic.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Logic; }\n/* harmony export */ });\n/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input */ \"./src/engine/input.js\");\n/* harmony import */ var _quadtree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./quadtree */ \"./src/engine/quadtree.js\");\n/* harmony import */ var _denizens_fishbaby__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../denizens/fishbaby */ \"./src/denizens/fishbaby.js\");\n/* harmony import */ var _denizens_fish__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../denizens/fish */ \"./src/denizens/fish.js\");\n/* harmony import */ var _denizens_algae__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../denizens/algae */ \"./src/denizens/algae.js\");\n/* harmony import */ var _denizens_shark__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../denizens/shark */ \"./src/denizens/shark.js\");\n/* harmony import */ var _denizens_effect__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../denizens/effect */ \"./src/denizens/effect.js\");\n/* harmony import */ var _denizens_fishegg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../denizens/fishegg */ \"./src/denizens/fishegg.js\");\n/* harmony import */ var _denizens_deadCreature__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../denizens/deadCreature */ \"./src/denizens/deadCreature.js\");\n/* harmony import */ var _environment_seaweedCluster__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../environment/seaweedCluster */ \"./src/environment/seaweedCluster.js\");\n/* harmony import */ var _denizens_crabbaby__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../denizens/crabbaby */ \"./src/denizens/crabbaby.js\");\n/* harmony import */ var _denizens_crab__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../denizens/crab */ \"./src/denizens/crab.js\");\n/* harmony import */ var _environment_rock__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../environment/rock */ \"./src/environment/rock.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Logic {\n\n    constructor(ctx, canvas, view) {\n\n        this.input = new _input__WEBPACK_IMPORTED_MODULE_0__[\"default\"]()\n        this.ctx = ctx\n        this.canvas = canvas\n        this.view = view\n\n        this.fishCount = 40\n        this.fishBabyCount = 0\n        this.algaeCount = 100\n        this.sharkCount = 2\n        this.eggCount = 0\n        this.effectCount = 0\n        this.seaweedClusterCount = 15\n        this.deadCreatureCount = 0\n        this.crabCount = 10\n        this.crabBabyCount = 0\n        this.rockCount = 20\n\n        this.fishes = this.tankPopulator(this.fishCount, _denizens_fish__WEBPACK_IMPORTED_MODULE_3__[\"default\"])\n        this.fishBabies = {}\n        this.algae = this.tankPopulator(this.algaeCount, _denizens_algae__WEBPACK_IMPORTED_MODULE_4__[\"default\"])\n        this.sharks = this.tankPopulator(this.sharkCount, _denizens_shark__WEBPACK_IMPORTED_MODULE_5__[\"default\"])\n        this.eggs = {}\n        this.effects = this.tankPopulator(0, _denizens_effect__WEBPACK_IMPORTED_MODULE_6__[\"default\"])\n        this.seaweedClusters = this.tankPopulator(this.seaweedClusterCount, _environment_seaweedCluster__WEBPACK_IMPORTED_MODULE_9__[\"default\"])\n        this.deadCreatures = {}\n        this.crabs = this.tankPopulator(this.crabCount, _denizens_crab__WEBPACK_IMPORTED_MODULE_11__[\"default\"])\n        this.crabBabies = {}\n        this.rocks = this.tankPopulator(this.rockCount, _environment_rock__WEBPACK_IMPORTED_MODULE_12__[\"default\"])\n\n        this.algaeSpawnIncrement = 2000\n        this.algaeSpawns()\n        \n        this.hungryDenizenArr = []\n        this.assignFoodWeb()\n        this.assignSpeciesObjects() \n\n        this.matingDenizensObj = {}\n\n        this.predatorsWithMouthsArr = [...Object.values(this.fishBabies), ...Object.values(this.fishes), ...Object.values(this.sharks)]\n        this.scavengersArr = [...Object.values(this.crabs), ...Object.values(this.crabBabies)]\n        this.trappersArr = [...Object.values(this.crabs)]\n        this.recentlyDeadDenizens = []\n\n    }\n\n\n\n\n    trappersTrapFishAndEggs() {\n        for (let i = 0; i < this.trappersArr.length; i++) {\t\n            let trapper = this.trappersArr[i]\n            if (trapper.trappedPrey) continue\n            if (trapper.mating) continue\n\n            let collisionArray = this.view.quadtree.findOverlaps(new _quadtree__WEBPACK_IMPORTED_MODULE_1__.Rectangle(trapper.trapPos[0], trapper.trapPos[1], trapper.trapWidth, trapper.trapHeight), trapper)\n\n            // pretty inneficient -> should look up predators directly\n            for (let j = 0; j < collisionArray.length; j++) {\n                let prey = collisionArray[j]\n                for (let k = 0; k < trapper.preySpecies.length; k++) {\n                    if (prey instanceof trapper.preySpecies[k]) {\n                        if (prey.dead) continue\n                        prey.trapped = trapper\n                        prey.trappedPosDelta = [trapper.pos[0] - prey.pos[0], trapper.pos[1] - prey.pos[1]]\n                        trapper.trappedPrey = prey\n                    }\n                }\n            }\n        }\n    }\n\n    reAssignDataObjs() {\n        this.predatorsWithMouthsArr = [...Object.values(this.fishBabies),...Object.values(this.fishes), ...Object.values(this.sharks)]\n        this.scavengersArr = [...Object.values(this.crabs), ...Object.values(this.crabBabies)]\n    }\n\n    \n    assignFoodWeb() {\n        _denizens_fish__WEBPACK_IMPORTED_MODULE_3__[\"default\"].prototype.preySpecies = [_denizens_algae__WEBPACK_IMPORTED_MODULE_4__[\"default\"]]\n        _denizens_fish__WEBPACK_IMPORTED_MODULE_3__[\"default\"].prototype.preySpeciesArr = [this.algae]\n        _denizens_fishbaby__WEBPACK_IMPORTED_MODULE_2__[\"default\"].prototype.preySpecies = [_denizens_algae__WEBPACK_IMPORTED_MODULE_4__[\"default\"]]\n        _denizens_fishbaby__WEBPACK_IMPORTED_MODULE_2__[\"default\"].prototype.preySpeciesArr = [this.algae]\n        _denizens_shark__WEBPACK_IMPORTED_MODULE_5__[\"default\"].prototype.preySpecies = [_denizens_fish__WEBPACK_IMPORTED_MODULE_3__[\"default\"], _denizens_fishbaby__WEBPACK_IMPORTED_MODULE_2__[\"default\"]]\n        _denizens_shark__WEBPACK_IMPORTED_MODULE_5__[\"default\"].prototype.preySpeciesArr = [this.fishes, this.fishBabies]\n        _denizens_crab__WEBPACK_IMPORTED_MODULE_11__[\"default\"].prototype.preySpecies = [_denizens_fishbaby__WEBPACK_IMPORTED_MODULE_2__[\"default\"]]\n        _denizens_crab__WEBPACK_IMPORTED_MODULE_11__[\"default\"].prototype.preySpeciesArr = [this.fishBabies]\n    }\n\n    assignSpeciesObjects() {\n        _denizens_fish__WEBPACK_IMPORTED_MODULE_3__[\"default\"].prototype.speciesObject = this.fishes\n        _denizens_fishbaby__WEBPACK_IMPORTED_MODULE_2__[\"default\"].prototype.speciesObject = this.fishBabies\n        _denizens_algae__WEBPACK_IMPORTED_MODULE_4__[\"default\"].prototype.speciesObject = this.algae\n        _denizens_shark__WEBPACK_IMPORTED_MODULE_5__[\"default\"].prototype.speciesObject = this.sharks\n        _denizens_fishegg__WEBPACK_IMPORTED_MODULE_7__[\"default\"].prototype.speciesObject = this.eggs\n        _denizens_effect__WEBPACK_IMPORTED_MODULE_6__[\"default\"].prototype.speciesObject = this.effects\n        _environment_seaweedCluster__WEBPACK_IMPORTED_MODULE_9__[\"default\"].prototype.speciesObject = this.seaweedClusters\n        _denizens_deadCreature__WEBPACK_IMPORTED_MODULE_8__[\"default\"].prototype.speciesObject = this.deadCreatures\n        _denizens_crab__WEBPACK_IMPORTED_MODULE_11__[\"default\"].prototype.speciesObject = this.crabs\n    }\n\n    coreLoop(){\n\n        // if (this.view.gameFrame % 10 !== 0) return\n        this.denizensHuntWhenHungry()\n        this.denizensWithMouthsCanFindSomethingElseToEat()\n        this.denizensWithMouthsEatPrey()\n        this.trappersTrapFishAndEggs()\n        this.denizensMate()\n        this.fishFleeFromSharks()\n        this.scavengersEatDeadCreatures()\n        // this.deadCreatureDebugLoop()\n        this.deleteDeadDenizens()\n        this.reAssignDataObjs()\n    }\n\n    scavengersEatDeadCreatures() {\n        for (let i = 0; i < this.scavengersArr.length; i++) {\n            let scavenger = this.scavengersArr[i]\n            if (scavenger.scavenging) continue\n            if (scavenger.mating) continue\n\n            let collisionArray = this.view.quadtree.findOverlaps(new _quadtree__WEBPACK_IMPORTED_MODULE_1__.Rectangle(scavenger.pos[0], scavenger.pos[1], scavenger.width, scavenger.height), scavenger)\n       \n            for (let j = 0; j < collisionArray.length; j++) {\n\n                if (!(collisionArray[j] instanceof _denizens_deadCreature__WEBPACK_IMPORTED_MODULE_8__[\"default\"])) continue\n                let deadCreature = collisionArray[j]\n                scavenger.scavenging = deadCreature\n                scavenger.speed = 0\n            }\n        }\n    }\n\n    fishFleeFromSharks() {\n        let allFish = [...Object.values(this.fishes), ...Object.values(this.fishBabies)]\n        for (let i = 0; i < allFish.length; i++) {\n            let fish = allFish[i]\n            if (fish.mating) continue\n            if (fish.fleeing) continue\n            this.findNearestPredator(fish, _denizens_shark__WEBPACK_IMPORTED_MODULE_5__[\"default\"])\n        }\n\n    }\n\n    findNearestPredator(prey, predatorSpeciesClass) {\n        let nearbyDenizenArray = this.view.quadtree.findOverlaps(new _quadtree__WEBPACK_IMPORTED_MODULE_1__.Rectangle(prey.pos[0] - 100, prey.pos[1] - 100, 200, 200 ), prey)\n        let closePredator;\n        for (const nearbyDenizen of nearbyDenizenArray) {\n            if (nearbyDenizen instanceof predatorSpeciesClass) {\n                closePredator = nearbyDenizen\n                break\n            }\n        }\n\n        if (!closePredator) return\n\n        prey.fleeing = true\n        prey.fleeFromCoords = closePredator.pos\n\n        setTimeout(() => {\n            prey.fleeing = false\n            prey.fleeFromCoords = []\n        }, 1000)\n    }\n\n    findNearestFood(predator) {\n        let nearestFoodCords = []\n        let nearestFoundDistance = Infinity\n        let foodId;\n\n        let allPreyArr = []\n        predator.preySpeciesArr.forEach((preyObj) => { allPreyArr = allPreyArr.concat(Object.values(preyObj)) })\n\n        for (const prey of allPreyArr) {\n            let xDistance = Math.abs(predator.pos[0] - prey.pos[0])\n            let yDistance = Math.abs(predator.pos[1] - prey.pos[1])\n\n            if ((xDistance + yDistance) < nearestFoundDistance) {\n                nearestFoundDistance = xDistance + yDistance\n                nearestFoodCords = prey.pos\n                foodId = prey.id\n            }\n        }\n\n        predator.hunting = foodId\n        predator.nearestFoodCords = nearestFoodCords\n    }\n\n    denizensMate() {\n        let matingDenizenArr = Object.values(this.matingDenizensObj)\n        for (let i = 0; i < matingDenizenArr.length; i++) {\n            let bachelorFish = matingDenizenArr[i]\n\n            let collisionArray = this.view.quadtree.queryRange(new _quadtree__WEBPACK_IMPORTED_MODULE_1__.Rectangle(bachelorFish.pos[0], bachelorFish.pos[1], bachelorFish.width, bachelorFish.height), bachelorFish)\n            let foundMate;\n\n            for (const bumpedDenizen of collisionArray) {\n                if (bachelorFish.constructor === bumpedDenizen.constructor &&\n                    bumpedDenizen.seekingMate) {\n                        foundMate = bumpedDenizen\n                        break\n                    }\n            }\n            if (foundMate) {\n                bachelorFish.mate(true)\n                bachelorFish.seekingMate = false\n                delete this.matingDenizensObj[bachelorFish.id]\n\n                foundMate.mate()\n                foundMate.seekingMate = false\n                delete this.matingDenizensObj[foundMate.id]\n            }\n        }\n    }\n\n    denizensWithMouthsCanFindSomethingElseToEat() {\n        for (let i = 0; i < this.predatorsWithMouthsArr.length; i++) {\n            let predator = this.predatorsWithMouthsArr[i]\n            if (!predator.hunting) continue\n\n            let preyStillAlive;\n            for (let j = 0; j < predator.preySpeciesArr.length; j++) {\n                if (predator.hunting in predator.preySpeciesArr[j]) {\n                    preyStillAlive = true  \n                    break\n                }\n            }\n\n            if (preyStillAlive) continue    \n            predator.hunting = false\n            predator.nearestFoodCords = []\n        }\n    }\n\n    denizensHuntWhenHungry() {\n        while (this.hungryDenizenArr.length) {\n            let hungryDenizen = this.hungryDenizenArr.pop()\n            this.findNearestFood(hungryDenizen)\n        }\n    }\n\n\n    denizensWithMouthsEatPrey() {\n        for (let i = 0; i < this.predatorsWithMouthsArr.length; i++) {\n            let predator = this.predatorsWithMouthsArr[i]\n            if (predator.energy > predator.eatFoodThreshold) continue\n            if (predator.mating) continue\n\n            let collisionArray = this.view.quadtree.findOverlaps(new _quadtree__WEBPACK_IMPORTED_MODULE_1__.Rectangle(predator.mouthPos[0], predator.mouthPos[1], predator.mouthSize, predator.mouthSize), predator)\n\n            // pretty inneficient -> should look up predators directly\n            for (let j = 0; j < collisionArray.length; j++) {\n                for (let k = 0; k < predator.preySpecies.length; k++) {\n                    if (collisionArray[j] instanceof predator.preySpecies[k])  {\n                        let prey = collisionArray[j]\n\n                        if (prey.dead) continue\n                        prey.dead = true\n                        this.recentlyDeadDenizens.push(prey)\n                        predator.energy = (predator.energy + prey.energyVal) > predator.maxEnergy ? predator.maxEnergy : predator.energy + prey.energyVal\n                        predator.foodEaten++\n                        predator.hunting = false\n                        predator.afterIEatCB()\n                    }\n                }\n            }\n        }\n    }\n\n    deleteDeadDenizens(){\n        while (this.recentlyDeadDenizens.length) {\n            let deadDenizen = this.recentlyDeadDenizens.pop()\n            deadDenizen.clearCallbacksOnDeath()\n            delete deadDenizen.speciesObject[deadDenizen.id]\n        }\n    }\n\n    algaeSpawns() {\n        setTimeout(()=>{\n            this.algaeCount++\n            this.algae[\"Algae\" + this.algaeCount] = new _denizens_algae__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.algaeCount, this.ctx, this.canvas, this.view, this)\n            this.algaeSpawns()\n        }, Math.floor(Math.random() * this.algaeSpawnIncrement) + this.algaeSpawnIncrement)\n    }\n\n    deadCreatureDebugLoop() {\n        for (let i = 0; i < Object.values(this.deadCreatures).length; i++) {\n            let deadc = Object.values(this.deadCreatures)[i]\n            let collisionArray = this.view.quadtree.queryRange(new _quadtree__WEBPACK_IMPORTED_MODULE_1__.Rectangle(deadc.pos[0], deadc.pos[1], deadc.width, deadc.height), deadc)\n        }\n    }\n\n\n    tankPopulator(objnum, className, options) {\n        let denizenObj = {}\n\n        while (objnum > 0) {\n            denizenObj[className.name + objnum] = new className(objnum, this.ctx, this.canvas, this.view, this, options)\n            objnum--\n        }\n        return denizenObj\n    }\n\n}\n\n//# sourceURL=webpack://jsproj/./src/engine/logic.js?");

/***/ }),

/***/ "./src/engine/quadtree.js":
/*!********************************!*\
  !*** ./src/engine/quadtree.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Rectangle\": function() { return /* binding */ Rectangle; },\n/* harmony export */   \"default\": function() { return /* binding */ Quadtree; }\n/* harmony export */ });\n\nclass Quadtree {\n    constructor(bounds, capacity, view) {\n        this.bounds = bounds;\n        this.capacity = capacity;\n        this.denizens = [];\n        this.nodes = [];\n        this.ctx = view.ctx\n        this.view = view\n    }\n\n\n    draw(){\n        this.ctx.fillStyle = 'rgba(255,0,0,.5)';\n        this.ctx.fillRect(this.bounds.x + this.view.offset[0], this.bounds.y + this.view.offset[1], this.bounds.width, 2)\n        this.ctx.fillRect(this.bounds.x + this.view.offset[0], this.bounds.y + this.view.offset[1], 2, this.bounds.height)\n        for (const node of this.nodes) {\n            node.draw()\n        }\n    }\n\n    insert(denizen) {\n        if (this.nodes.length) {\n            for (const node of this.nodes) {\n                if (node.insert(denizen)) {\n                    return true;\n                }\n            }\n        }\n        \n        if (!this.bounds.contains(denizen)) {\n            return false;\n        }\n\n        if (this.denizens.length < this.capacity) {\n            this.denizens.push(denizen);\n            return true;\n        }\n\n        if (!this.nodes.length) {\n            this.subdivide();\n        }\n\n        for (const node of this.nodes) {\n            if (node.insert(denizen)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    subdivide() {\n        const x = this.bounds.x;\n        const y = this.bounds.y;\n        const halfWidth = this.bounds.width / 2;\n        const halfHeight = this.bounds.height / 2;\n\n        const nw = new Quadtree(new Rectangle(x, y, halfWidth, halfHeight), this.capacity, this.view);\n        const ne = new Quadtree(new Rectangle(x + halfWidth, y, halfWidth, halfHeight), this.capacity, this.view);\n        const sw = new Quadtree(new Rectangle(x, y + halfHeight, halfWidth, halfHeight), this.capacity, this.view);\n        const se = new Quadtree(new Rectangle(x + halfWidth, y + halfHeight, halfWidth, halfHeight), this.capacity, this.view);\n\n        this.nodes = [nw, ne, sw, se];\n\n        for (const denizen of this.denizens) {\n            for (const node of this.nodes) {\n                node.insert(denizen);\n            }\n        }\n\n        this.denizens = [];\n    }\n\n    queryType(denizenClass, debugbool) {\n        const foundDenizens = [];\n\n        for (const denizen of this.denizens) {\n            if (denizen.constructor === denizenClass) {\n                foundDenizens.push(denizen);\n            }\n        }\n\n        for (const node of this.nodes) {\n            foundDenizens.push(...node.queryType(denizenClass));\n        }\n\n        if (debugbool) {\n            foundDenizens.forEach((denizen)=>{\n                this.view.ctx.fillRect(denizen.pos[0] + this.view.offset[0], denizen.pos[1] + this.view.offset[1], denizen.width, denizen.height)\n            })\n        }\n\n        return foundDenizens;\n    }\n\n    queryRange(range, opDenizen) {\n        const foundDenizens = [];\n\n        // if (debugbool) {\n        //     this.view.ctx.fillRect(range.x + this.view.offset[0], range.y + this.view.offset[1], range.width, range.height)\n        // }\n    \n        if (!this.bounds.intersects(range)) {\n            return foundDenizens;\n        }\n\n        for (const denizen of this.denizens) {\n            if (range.contains(denizen) && opDenizen.id !== denizen.id) {\n                foundDenizens.push(denizen);\n            }\n        }\n\n        // contains method checks for point collision, I want it to check for rectangle collision, but I couldn't get it to work. \n\n        // for (const denizen of this.denizens) {\n        //     if (range.intersects({x: denizen.pos[0], y: denizen.pos[1], width: denizen.width, height: denizen.height}, this.view)) {\n        //         foundDenizens.push(denizen);\n        //     }\n        // }\n\n\n        for (const node of this.nodes) {\n            foundDenizens.push(...node.queryRange(range, opDenizen));\n        }\n\n        return foundDenizens;\n    }\n\n    findOverlaps(range, opDenizen) {\n        const foundDenizens = [];\n\n        if (!this.bounds.intersects(range)) {\n            return foundDenizens;\n        }\n\n        for (const denizen of this.denizens) {\n            if (opDenizen.id !== denizen.id && range.overlaps(denizen)) {\n                foundDenizens.push(denizen);\n            }\n        }\n\n\n        for (const node of this.nodes) {\n            foundDenizens.push(...node.findOverlaps(range, opDenizen));\n        }\n\n        return foundDenizens;\n    }\n}\n\nclass Rectangle {\n    constructor(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n\n    overlaps(denizen) {\n        let recA = { left: this.x, right: this.x + this.width, top: this.y, bottom: this.y + this.height }\n        let recB = { left: denizen.pos[0], right: denizen.pos[0] + denizen.width, top: denizen.pos[1], bottom: denizen.pos[1] + denizen.height }\n        return this.recOverlapCheck(recA, recB) || this.recOverlapCheck(recB, recA)\n    }\n\n\n    recOverlapCheck(a, b) {\n        return ((b.left <= a.right) && (b.right >= a.left) && (b.top <= a.bottom) && (b.bottom >= a.top))\n    }\n\n\n    contains(denizen) {\n        let [x, y] = denizen.pos\n        return (\n            x >= this.x &&\n            x <= this.x + this.width &&\n            y >= this.y &&\n            y <= this.y + this.height\n        );\n    }\n\n    intersects(range, view) {\n\n        // if (view) {\n        //     // view.ctx.globalAlpha = .1;\n        //     // view.ctx.fillStyle = 'rgba(255,0,0,.1)';\n        //     // view.ctx.fillRect(this.x + view.offset[0], this.y + view.offset[1], this.width, this.height)\n        //     // view.ctx.globalAlpha = 1;\n\n        //     // console.log({ x: range.x + view.offset[0], y: range.y + view.offset[1], width: range.width, height: range.height })\n        //     view.ctx.globalAlpha = .1;\n        //     view.ctx.fillStyle = 'rgba(0,200,255,.1)';\n        //     view.ctx.fillRect(range.x + view.offset[0], range.y + view.offset[1], range.width, range.height)\n        //     view.ctx.globalAlpha = 1;\n        // }\n\n\n        return !(\n            range.x - range.width > this.x + this.width ||\n            range.x + range.width < this.x - this.width ||\n            range.y - range.height > this.y + this.height ||\n            range.y + range.height < this.y - this.height\n        );\n    }\n}\n\n//# sourceURL=webpack://jsproj/./src/engine/quadtree.js?");

/***/ }),

/***/ "./src/engine/utils.js":
/*!*****************************!*\
  !*** ./src/engine/utils.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"miniRandomizer\": function() { return /* binding */ miniRandomizer; },\n/* harmony export */   \"rand\": function() { return /* binding */ rand; }\n/* harmony export */ });\n\n\n\nconst rand = (floor, ceil) => {\n    if (!ceil) return Math.floor(Math.random() * floor)\n    return Math.floor(Math.random() * (ceil - floor)) + floor + 1\n}\n\nconst miniRandomizer = () => {\n    //to prevent pos collisions in the quad tree - if more than bucket limit share exact same pos, it recurses and breaks\n    return Math.floor(Math.random() * 1000) / 1000\n}\n\nconst tester = (ceil, floor) => {\n    let resArr = []\n\n    for (let i=0; i < 1000; i++) {\n        resArr.push(rand(ceil, floor))\n    }\n    return [Math.min(...resArr), Math.max(...resArr)]\n\n}\n\n//# sourceURL=webpack://jsproj/./src/engine/utils.js?");

/***/ }),

/***/ "./src/engine/view.js":
/*!****************************!*\
  !*** ./src/engine/view.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ View; }\n/* harmony export */ });\n/* harmony import */ var _logic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logic */ \"./src/engine/logic.js\");\n/* harmony import */ var _quadtree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./quadtree */ \"./src/engine/quadtree.js\");\n\n\n\nclass View {\n\n    constructor(canvas) {\n        \n        this.canvas = canvas\n        this.ctx = this.canvas.getContext('2d')\n        this.background = new Image()\n        this.background.src = './dist/art/background.jpeg'\n\n        this.arenaCoef = 2\n        this.arenaWidth = this.canvas.width * this.arenaCoef\n        this.arenaHeight = this.canvas.height * this.arenaCoef\n        this.backgroundPos = [-this.arenaWidth/3, -this.arenaHeight/3]\n        this.offset = [-this.arenaWidth / 3, -this.arenaHeight / 3]\n\n\n        this.logic = new _logic__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.ctx, this.canvas, this)\n        this.fishes = this.logic.fishes\n        this.fishBabies = this.logic.fishBabies\n        this.algae = this.logic.algae\n        this.eggs = this.logic.eggs\n        this.sharks = this.logic.sharks\n        this.effects = this.logic.effects\n        this.seaweedClusters = this.logic.seaweedClusters\n        this.deadCreatures = this.logic.deadCreatures\n        this.crabs = this.logic.crabs\n        this.crabBabies = this.logic.crabBabies\n        this.rocks = this.logic.rocks\n\n        this.allDenizensArr = [this.fishes, this.fishBabies, this.algae, this.eggs, this.sharks, this.effects, this.seaweedClusters, this.crabs, this.deadCreatures, this.crabBabies, this.rocks]\n        this.allDenizensinQuadArr = [this.fishes, this.fishBabies, this.algae, this.eggs, this.sharks, this.effects, this.crabs, this.deadCreatures]\n\n        this.bounds = new _quadtree__WEBPACK_IMPORTED_MODULE_1__.Rectangle(0, 0, this.arenaWidth, this.arenaHeight)\n        this.quadtree = {}\n        this.populateQuad()\n        this.animate()\n        this.debugging = false\n        this.gameFrame = 0\n\n\n\n    }\n\n\n    populateQuad() {\n        this.quadtree = new _quadtree__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.bounds, 6, this);\n        this.allDenizensinQuadArr.forEach((denizenObj)=>{\n            Object.values(denizenObj).forEach((denizen) => {\n                this.quadtree.insert(denizen)\n            })\n        })\n\n    }\n\n\n\n\n    animate() {\n        this.gameFrame++ \n        // if (this.gameFrame % 100 === 0) this.populateQuad() \n        this.populateQuad() \n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        this.updateCamera(this.logic.input.keys) \n        this.drawBackround()\n        this.drawTextBox()\n        this.drawDenizens()\n        this.logic.coreLoop()\n        if (this.debugging) this.quadtree.draw()\n        requestAnimationFrame(this.animate.bind(this))\n    }\n\n    drawBackround() {\n        this.ctx.drawImage(this.background, this.backgroundPos[0], this.backgroundPos[1], this.arenaWidth, this.arenaHeight)\n        this.ctx.fillStyle = 'rgba(0,0,0,.3)';\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    drawTextBox() {\n        this.ctx.fillStyle = 'rgba(0,0,0,.3)';\n        this.ctx.fillRect(10, 10, 150, 220)\n\n        this.ctx.fillStyle = 'rgba(250,110,0,1)';\n        this.ctx.font = \"24px serif\";\n        this.ctx.fillText(`Algae: ${Object.values(this.logic.algae).length}`, 25, 50)\n        this.ctx.fillText(`Fishes: ${Object.values(this.logic.fishes).length}`, 25, 80)\n        this.ctx.fillText(`Eggs: ${Object.values(this.logic.eggs).length}`, 25, 110)\n        this.ctx.fillText(`Sharks: ${Object.values(this.logic.sharks).length}`, 25, 140)\n        this.ctx.fillText(`Crabs: ${Object.values(this.logic.crabs).length}`, 25, 170)\n        this.ctx.fillText(`Corpses: ${Object.values(this.logic.deadCreatures).length}`, 25, 200)\n    }\n\n\n    updateCamera(input) {\n        let xSpeed = 0;\n        let ySpeed = 0;\n\n        if (input.includes('ArrowRight')) {\n            xSpeed = -(1.5)\n        } else if (input.includes('ArrowLeft')) {\n            xSpeed = (1.5)\n        } else {\n            xSpeed = (0)\n        }\n\n        if (input.includes('ArrowUp')) {\n            ySpeed = (1.5)\n        } else if (input.includes('ArrowDown')) {\n            ySpeed = -(1.5)\n        } else {\n            ySpeed = (0)\n        }\n\n        this.offset[0] += xSpeed;\n        this.offset[1] += ySpeed;\n\n        if (this.offset[0] >= 0) this.offset[0] = 0;\n        if (this.offset[0] <= (-this.arenaWidth + this.canvas.width)) this.offset[0] = (-this.arenaWidth + this.canvas.width);\n        if (this.offset[1] >= 0) this.offset[1] = 0;\n        if (this.offset[1] <= (-this.arenaHeight + this.canvas.height)) this.offset[1] = (-this.arenaHeight+ this.canvas.height);\n\n        this.backgroundPos[0] = this.offset[0];\n        this.backgroundPos[1] = this.offset[1];\n    }\n\n    drawDenizens() {\n        this.allDenizensArr.forEach((denizenObj)=>{\n            Object.values(denizenObj).forEach((denizen) => {\n                denizen.coreloop()\n            })\n        })\n    }\n}\n\n\n\n\n//# sourceURL=webpack://jsproj/./src/engine/view.js?");

/***/ }),

/***/ "./src/environment/rock.js":
/*!*********************************!*\
  !*** ./src/environment/rock.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _denizens_denizen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../denizens/denizen */ \"./src/denizens/denizen.js\");\n/* harmony import */ var _engine_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../engine/utils */ \"./src/engine/utils.js\");\n\n\nclass Rock extends _denizens_denizen__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n    constructor(id, ctx, canvas, view, logic) {\n        super(ctx, canvas, view, logic)\n        this.id = \"Rock\" + id\n        this.img = new Image()\n        this.rockKeys = [\"small_rock\", \"small_rock_2\", \"small_green\", \"med_rock\", \"med_rock_2\", \"rock_pile\", \"tall_med\", \"boulder_1\", \"boulder_2\", \"arch\"]\n        this.rockRoll = this.rockKeys[(0,_engine_utils__WEBPACK_IMPORTED_MODULE_1__.rand)(this.rockKeys.length)]\n\n        this.width;\n        this.height;\n        this.rockSelector()\n        this.pos = [Math.floor(Math.random() * this.arenaWidth - (this.width / 2)), this.arenaHeight - this.height]\n    }\n\n    coreloop(){\n        this.draw()\n    }\n\n    draw() {\n        this.ctx.drawImage(this.img, this.pos[0] + this.offset[0], this.pos[1] + this.offset[1], this.width, this.height)\n    }\n\n    \n    rockSelector() {\n        switch (this.rockRoll) {\n            case \"small_rock\":\n                this.img.src = './dist/art/rocks/small_rock.png'\n                this.width = (0,_engine_utils__WEBPACK_IMPORTED_MODULE_1__.rand)(20,50)\n                this.height = this.width * .4\n                break\n\n            case \"small_rock_2\":\n                this.img.src = './dist/art/rocks/small_rock_2.png'\n                this.width = (0,_engine_utils__WEBPACK_IMPORTED_MODULE_1__.rand)(10, 50)\n                this.height = this.width * .7\n                break\n\n            case \"small_green\":\n                this.img.src = './dist/art/rocks/small_rock_green.png'\n                this.width = (0,_engine_utils__WEBPACK_IMPORTED_MODULE_1__.rand)(20, 60)\n                this.height = this.width * 1.1\n                break\n\n            case \"med_rock\":\n                this.img.src = './dist/art/rocks/med_rock.png'\n                this.width = (0,_engine_utils__WEBPACK_IMPORTED_MODULE_1__.rand)(40, 80)\n                this.height = this.width * .6\n                break\n\n            case \"med_rock_2\":\n                this.img.src = './dist/art/rocks/med_rock_2.png'\n                this.width = (0,_engine_utils__WEBPACK_IMPORTED_MODULE_1__.rand)(20, 60)\n                this.height = this.width * 1.1\n                break\n\n\n            case \"rock_pile\":\n                this.img.src = './dist/art/rocks/rock_pile.png'\n                this.width = (0,_engine_utils__WEBPACK_IMPORTED_MODULE_1__.rand)(20, 60)\n                this.height = this.width * .9\n                break\n\n            case \"tall_med\":\n                this.img.src = './dist/art/rocks/tall_med.png'\n                this.width = (0,_engine_utils__WEBPACK_IMPORTED_MODULE_1__.rand)(15, 35)\n                this.height = this.width * 2\n                break\n\n            case \"boulder_1\":\n                this.img.src = './dist/art/rocks/boulder_1.png'\n                this.width = (0,_engine_utils__WEBPACK_IMPORTED_MODULE_1__.rand)(40, 120)\n                this.height = this.width * .5\n                break\n\n            case \"boulder_2\":\n                this.img.src = './dist/art/rocks/boulder_2.png'\n                this.width = (0,_engine_utils__WEBPACK_IMPORTED_MODULE_1__.rand)(20, 100)\n                this.height = this.width *.65\n                break\n\n            case \"arch\":\n                this.img.src = './dist/art/rocks/arch.png'\n                this.width = (0,_engine_utils__WEBPACK_IMPORTED_MODULE_1__.rand)(100, 140)\n                this.height = this.width * .45\n                break\n        }\n    }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Rock);\n\n//# sourceURL=webpack://jsproj/./src/environment/rock.js?");

/***/ }),

/***/ "./src/environment/seaweed.js":
/*!************************************!*\
  !*** ./src/environment/seaweed.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Seaweed; }\n/* harmony export */ });\n/* harmony import */ var _denizens_denizen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../denizens/denizen */ \"./src/denizens/denizen.js\");\n\n\nclass Seaweed extends _denizens_denizen__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id, ctx, canvas, view, logic, {pos}) {\n        super(ctx, canvas, view, logic)\n        this.id = id\n        this.width = 60 \n        this.height = 80 \n        this.sizeCoef = Math.floor(Math.random() * 15)\n        this.pos = [pos[0] + Math.floor(Math.random() * 10), (this.arenaHeight - this.height) - ((id - 1) * 25)]\n        // this.pos[0] = Math.floor(Math.random() * this.arenaWidth - this.width/2)\n        // this.pos[1] = this.arenaHeight - this.height - Math.floor(Math.random() * 200)\n\n        this.img = new Image()\n        this.img.src = './dist/art/seaweed.png'\n        this.aniStateNames = [\"sway1\", \"sway2\", \"swish\", \"swoosh\"]\n        this.animationState = this.aniStateNames[Math.floor(Math.random() * 2)]\n        this.animations = [];\n\n        //what if seaweed clusters could grow? and then be eaten by something over time.\n\n        this.animationStates = [\n            { name: \"sway1\", frames: 8},\n            { name: \"sway2\", frames: 8},\n            { name: \"swish\", frames: 8 },\n            { name: \"swoosh\", frames: 8 }\n        ];\n\n        this.gameFrame = Math.floor(Math.random() * 100)\n        this.staggerFrame = 40\n\n        this.animationFramesSetter()\n    }\n\n\n    animationFramesSetter() {\n        this.animationStates.forEach((spriteState,index) => {\n            let frames = {\n                loc: [],\n            }\n            for (let j = 0; j < spriteState.frames; j++) {\n                let positionX = j * this.width;\n                let positionY = index * this.height;\n                frames.loc.push({ x: positionX, y: positionY });\n            }\n            this.animations[spriteState.name] = frames;\n        });\n    }\n\n    coreloop() {\n\n        let position = Math.floor((this.gameFrame / this.staggerFrame) % this.animations[this.animationState].loc.length)\n        let frameX = this.width * position;\n        let frameY = this.animations[this.animationState].loc[position].y\n        this.ctx.drawImage(this.img, frameX, frameY, this.width, this.height, this.pos[0] + this.offset[0], this.pos[1] + this.offset[1], this.width + this.sizeCoef, this.height + this.sizeCoef)\n        this.gameFrame++\n    }\n\n\n    \n\n    \n}\n\n\n\n\n\n//# sourceURL=webpack://jsproj/./src/environment/seaweed.js?");

/***/ }),

/***/ "./src/environment/seaweedCluster.js":
/*!*******************************************!*\
  !*** ./src/environment/seaweedCluster.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ SeaweedCluster; }\n/* harmony export */ });\n/* harmony import */ var _seaweed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./seaweed */ \"./src/environment/seaweed.js\");\n\n\nclass SeaweedCluster {\n    constructor(id, ctx, canvas, view, logic) {\n        this.id = id\n        this.ctx = ctx\n        this.canvas = canvas\n        this.view = view\n        this.logic = logic\n\n        this.pos = [Math.floor( Math.random() * this.view.arenaWidth), 0]\n        this.seaweedCount = Math.floor(Math.random() * 15) + 10\n        this.seaweed = this.logic.tankPopulator(this.seaweedCount, _seaweed__WEBPACK_IMPORTED_MODULE_0__[\"default\"], {pos: this.pos})\n        this.tallestPoint = this.tallestPointFinder()\n    }\n\n    tallestPointFinder() {\n        return Object.values(this.seaweed)[0].pos[1] + 10\n    }\n\n    coreloop() {\n        Object.values(this.seaweed).forEach((seaweed) => {\n            seaweed.coreloop()\n        }) \n        this.ctx.fillStyle = 'rgba(255,0,0,1)';\n        if (this.view.debugging) this.ctx.fillRect(this.pos[0] + 30 + this.view.offset[0], this.tallestPoint + this.view.offset[1], 10,10)\n    }\n\n\n \n\n}\n\n\n\n//# sourceURL=webpack://jsproj/./src/environment/seaweedCluster.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _engine_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine/view */ \"./src/engine/view.js\");\n\n\nconst canvas = document.getElementById('canvas1')\ncanvas.height = 666\ncanvas.width = 1000\n\nconst view = new _engine_view__WEBPACK_IMPORTED_MODULE_0__[\"default\"](canvas)\n\n\n// window.addEventListener(\"resize\", (e)=> {\n\n//     canvas.height = e.currentTarget.innerHeight\n//     canvas.width = e.currentTarget.innerWidth\n//     view.arenaWidth = e.currentTarget.innerWidth * view.arenaCoef\n//     view.arenaHeight = e.currentTarget.innerHeight * view.arenaCoef\n\n// })\n\n//# sourceURL=webpack://jsproj/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;